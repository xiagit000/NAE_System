/*
 * Copyright 2010. 
 * 
 * This document may not be reproduced, distributed or used 
 * in any manner whatsoever without the expressed written 
 * permission of Boventech Corp. 
 * 
 * $Rev: Rev $
 * $Author: Author $
 * $LastChangedDate: LastChangedDate $
 *
 */

package com.boventech.gplearn.controller;

import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.boventech.gplearn.annotation.RequiredPrivilege;
import com.boventech.gplearn.entity.Batch;
import com.boventech.gplearn.entity.LearnClass;
import com.boventech.gplearn.entity.Privilege;
import com.boventech.gplearn.entity.SchoolRoll;
import com.boventech.gplearn.entity.User;
import com.boventech.gplearn.entity.User.UserType;
import com.boventech.gplearn.exception.StudySpaceClassRoomCreateFaildException;
import com.boventech.gplearn.exception.StudySpaceClassRoomDestroyFaildException;
import com.boventech.gplearn.service.BatchService;
import com.boventech.gplearn.service.LearnAreaService;
import com.boventech.gplearn.service.LearnClassService;
import com.boventech.gplearn.service.LearnSubProjectService;
import com.boventech.gplearn.service.SchoolRollService;

@Controller
@RequestMapping(value = "/learnclass")
public class LearnClassController extends ApplicationController {
	private static final Logger LOGGER = LoggerFactory.getLogger(LearnClassController.class);

    @Autowired
    private LearnClassService learnClassService;

    @Autowired
    private LearnAreaService learnAreaService;

    @Autowired
    private LearnSubProjectService learnSubProjectService;
    
    @Autowired
    private SchoolRollService schoolRollService;
    
    @Autowired
    private BatchService batchService;

    @RequiredPrivilege(value={Privilege.SYSTEM_LEARNCLASS})
    @RequestMapping(method = RequestMethod.GET)
    public String index(ModelMap model,HttpServletRequest request) {
    	setSiteBarActive("zs", "learnclass", request);
        List<LearnClass> classes = this.learnClassService.listAll();
        model.addAttribute("classes", classes);
        return "/learnClass/index";
    }

    @RequiredPrivilege(value={Privilege.SYSTEM_LEARNCLASS})
    @RequestMapping(method = RequestMethod.POST)
    public String create(Model model, RedirectAttributes redirectAttr, LearnClass learnClass, String areaId,
            String projectId) {
        if (this.learnClassService.isExistByCode(learnClass.getCode())) {
            sendErrorMessageWithParameter(model, "common.name.exsit", learnClass.getCode());
            model.addAttribute("learnArea", learnClass);
            model.addAttribute("areas", this.learnAreaService.listEnable());
            model.addAttribute("projects", this.learnSubProjectService.listAll());
            return "learnClass/add";
        }
        Batch batch = batchService.getCurrentBatch();
        if(checkEntityEmpty(batch)){
        	if(checkEntityEmpty(batch)){
    			sendErrorMessageWhenRedirect(redirectAttr,
    			"learnPlan.currentbatch.null");
    			return "redirect:/batch";
    		}
        }
        learnClass.setBatch(batch);
        learnClass.setCreateTime(new Date());
        learnClass.setLearnArea(this.learnAreaService.findById(Long.parseLong(areaId)));
        learnClass.setLearnProject(this.learnSubProjectService.findById(Long.parseLong(projectId)));
        
        try {
			this.learnClassService.saveLearnClass(learnClass);
			sendNoticeWhenRedirect(redirectAttr, "common.add.success");
		} catch (StudySpaceClassRoomCreateFaildException e) {
			LOGGER.error(e.getMessage());
			sendErrorMessageWhenRedirect(redirectAttr, "studyspace.learnclass.sendError");
		}
        return "redirect:/learnclass";
    }
    
   
    @RequiredPrivilege(value={Privilege.SYSTEM_LEARNCLASS})
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    public String update(Model model, @PathVariable String id, RedirectAttributes redirectAttr,
            LearnClass learnClass, String areaId, String projectId) {
        if (this.learnClassService.isExistByCodeWhitoutCurrent(learnClass)) {
            sendErrorMessageWithParameter(model, "common.name.exsit", learnClass.getCode());
            model.addAttribute("learnClass", this.learnClassService.findById(Long.parseLong(id)));
            model.addAttribute("areas", this.learnAreaService.listEnable());
            model.addAttribute("projects", this.learnSubProjectService.listAll());
            return "learnClass/edit";
        }
        learnClass.setLearnArea(this.learnAreaService.findById(Long.parseLong(areaId)));
        learnClass.setLearnProject(this.learnSubProjectService.findById(Long.parseLong(projectId)));
        this.learnClassService.update(learnClass);
        sendNoticeWhenRedirect(redirectAttr, "common.update.success");
        return "redirect:/learnclass";
    }

    @RequiredPrivilege(value={Privilege.SYSTEM_LEARNCLASS})
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String destroy(Model model, @PathVariable Long id, RedirectAttributes redirectAttrs) {
        if (checkEntityEmpty(learnClassService.findById(id))) {
            return "error/404";
        }
        try {
			this.learnClassService.deleteLearnClass(id);
			sendNoticeWhenRedirect(redirectAttrs, "common.destroy.success");
		}catch (RuntimeException e) {
			sendErrorMessageWhenRedirect(redirectAttrs, "common.reference.delete");
			LOGGER.error(e.getMessage());
		} 
        catch (StudySpaceClassRoomDestroyFaildException e) {
			LOGGER.error(e.getMessage());
			sendErrorMessageWhenRedirect(redirectAttrs, "studyspace.learnclass.detroyError");
		}
        return "redirect:/learnclass";
    }
    
    

    @RequiredPrivilege(value={Privilege.SYSTEM_LEARNCLASS})
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String show(Model model, @PathVariable String id, RedirectAttributes redirectAttrs,HttpServletRequest request) {
        if (isNull(redirectAttrs, model, true, id)) {
            return "redirect:/learnclass";
        }
        return "/learnClass/show";
    }
    
    @RequiredPrivilege(value={Privilege.TEACHER_CLASS_SPACE,Privilege.STUDENT_CLASS_INFO})
    @RequestMapping(value="/show")
    public String openShow(HttpServletRequest request,Model model){
    	User user = (User)request.getSession().getAttribute("currentUser");
    	if(user.getUserType().equals(UserType.Teacher)){
    		LearnClass learnClass = learnClassService.findByTeacher(user);
    		model.addAttribute("learnClass", learnClass);
    		return "role/teacher/classInfo";
    	}
    	else{
    		SchoolRoll schoolRoll = schoolRollService.findByUserNewest(user);
    		model.addAttribute("learnClass",schoolRoll.getLearnClass());
    		return "role/student/classInfo";
    	}
    }
    

    @RequiredPrivilege(value={Privilege.SYSTEM_LEARNCLASS})
    @RequestMapping(value = "/{id}/edit", method = RequestMethod.GET)
    public String edit(Model model, @PathVariable String id, RedirectAttributes redirectAttrs) {
        if (isNull(redirectAttrs, model, true, id)) {
            return "redirect:/learnclass";
        }
        return "/learnClass/edit";
    }

    @RequiredPrivilege(value={Privilege.SYSTEM_LEARNCLASS})
    @RequestMapping(value = "/new", method = RequestMethod.GET)
    public String editNew(ModelMap model, RedirectAttributes redirectAttr) {
        if (!this.learnAreaService.checkExist()) {
            sendErrorMessageWhenRedirect(redirectAttr, "learnClass.learnArea.list.empty");
            return "redirect:/learnArea";
        } else if (!this.learnSubProjectService.checkExist()) {
            sendErrorMessageWhenRedirect(redirectAttr, "learnClass.learnSubProject.list.empty");
            return "redirect:/learnproject";
        }
        model.addAttribute("areas", this.learnAreaService.listEnable());
        model.addAttribute("projects", this.learnSubProjectService.listAll());
        return "/learnClass/add";
    }

    private boolean isNull(final RedirectAttributes redirectAttrs, Model model, boolean whithModel, String id) {
        LearnClass learnClass = this.learnClassService.findById(Long.parseLong(id));
        if (null == learnClass) {
            sendErrorMessageWithParameterWhenRedirect(redirectAttrs, "common.obj.notfound", "id:" + id);
            return true;
        } else {
            if (whithModel) {
                model.addAttribute("learnClass", learnClass);
                model.addAttribute("areas", this.learnAreaService.listEnable());
                model.addAttribute("projects", this.learnSubProjectService.listAll());
            }
            return false;
        }
    }
}
