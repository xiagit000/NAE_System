package com.boventech.gplearn.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.boventech.gplearn.entity.LearnCourse;
import com.boventech.gplearn.entity.Discipline.LearnRange;
import com.boventech.gplearn.entity.LearnCourse.LearnShape;
import com.boventech.gplearn.service.LearnCourseService;

@Controller
@RequestMapping(value="/learncourse")
public class LearnCourseController extends ApplicationController {

	@Autowired
	private LearnCourseService learnCourseService;
	
	/**
	 * Index
	 * @param page
	 * @param model
	 * @return
	 */
	@RequestMapping
	public String index(Integer page,Model model){
		List<LearnCourse> list=learnCourseService.listWithPagination(page);
		model.addAttribute("list", list);
		return "learncourse/index";
	}
	
	@RequestMapping(value="/{id}")
	public String show(@PathVariable Long id,Model model,RedirectAttributes redirectAttrs){
		LearnCourse learnCourse= learnCourseService.findById(id);
		if(null==learnCourse){
			sendErrorMessageWithParameterWhenRedirect(redirectAttrs, "common.obj.notfound", "id:"+id);
			return "redirect:/learncourse";
		}
		model.addAttribute("learnCourse", learnCourse);
		return "learncourse/show";
	}
	
	/**
	 * Jump to the CREATE Page
	 * @param model
	 * @return
	 */
	@RequestMapping(value="/create")
	public String create(Model model){
		initSelectData(model);
		return "learncourse/create";
	}
	
	/**
	 * Jump to the Edit Page
	 * @return
	 */
	@RequestMapping(value="/{id}/update")
	public String edit(@PathVariable Long id,RedirectAttributes redirectAttr,Model model){
		LearnCourse learnCourse=learnCourseService.findById(id);
		if(null==learnCourse){
			sendErrorMessageWithParameterWhenRedirect(redirectAttr, "common.obj.notfound", "id:"+id);
			return "redirect:/learncourse";
		}
		initSelectData(model);
		model.addAttribute("learnCourse", learnCourse);
		return "learncourse/update";
	}
	

	@RequestMapping(method=RequestMethod.POST)
	public String save(LearnCourse learnCourse,RedirectAttributes redirectAttr,Model model){
		if(learnCourseService.checkExsitByname(learnCourse.getName())){
			sendErrorMessageWithParameter(model,"common.name.exsit", learnCourse.getName());
			initSelectData(model);
			model.addAttribute("learnCourse",learnCourse);
			return "learncourse/create";
		}
		if(learnCourseService.checkExsitByCode(learnCourse.getCode())){
			sendErrorMessageWithParameter(model, "common.name.exsit", learnCourse.getCode());
			initSelectData(model);
			model.addAttribute("learnCourse", learnCourse);
			return "learncourse/create";
		}
		learnCourseService.save(learnCourse);
		sendNoticeWhenRedirect(redirectAttr, "common.add.success");
		return "redirect:/learncourse";
	}
	
	@RequestMapping(value="/{id}",method=RequestMethod.PUT)
	public String update(LearnCourse learnCourse,RedirectAttributes redirectAttr,Model model){
		if(learnCourseService.checkExsitBynameWithOutCurrent(learnCourse)){
			sendErrorMessageWithParameter(model,"common.name.exsit", learnCourse.getName());
			initSelectData(model);
			model.addAttribute("learnCourse",learnCourse);
			return "learncourse/update";
		}
		if(learnCourseService.checkExsitByCodeWithOutCurrent(learnCourse)){
			sendErrorMessageWithParameter(model,"common.name.exsit", learnCourse.getCode());
			initSelectData(model);
			model.addAttribute("learnCourse",learnCourse);
			return "learncourse/update";
		}
		learnCourseService.update(learnCourse);
		sendNoticeWhenRedirect(redirectAttr, "common.update.success");
		return "redirect:/learncourse";
	}
	
	@RequestMapping(value="/{id}",method=RequestMethod.DELETE)
	public String destroy(@PathVariable Long id,RedirectAttributes redirectAttr){
		LearnCourse learnCourse=learnCourseService.findById(id);
		if(null==learnCourse){
			sendErrorMessageWithParameterWhenRedirect(redirectAttr, "common.obj.notfound", "id:"+id);
			return "redirect:/learncourse";
		}
		try {
			learnCourseService.delete(learnCourse.getId());
			sendNoticeWhenRedirect(redirectAttr, "common.destroy.success");
		} catch (Exception e) {
			sendErrorMessageWithParameterWhenRedirect(redirectAttr, "common.reference.delete", learnCourse.getName());
		}
		return "redirect:/learncourse";
	}
	
	private void initSelectData(Model model){
		LearnRange [] learnRangeList=LearnRange.values();
		LearnShape [] learnShapeList=LearnShape.values();
		model.addAttribute("learnShapeList",learnShapeList);
		model.addAttribute("learnRangeList", learnRangeList);
	}
	
}
