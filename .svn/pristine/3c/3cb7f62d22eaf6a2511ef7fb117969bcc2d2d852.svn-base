/*
 * Copyright 2010. 
 * 
 * This document may not be reproduced, distributed or used 
 * in any manner whatsoever without the expressed written 
 * permission of Boventech Corp. 
 * 
 * $Rev: Rev $
 * $Author: Author $
 * $LastChangedDate: LastChangedDate $
 *
 */

package com.boventech.gplearn.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import sun.misc.BASE64Encoder;

import com.boventech.gplearn.dao.SchoolRollDao;
import com.boventech.gplearn.dao.UserDao;
import com.boventech.gplearn.entity.Account;
import com.boventech.gplearn.entity.Batch;
import com.boventech.gplearn.entity.Discipline;
import com.boventech.gplearn.entity.EnrollmentPlan;
import com.boventech.gplearn.entity.Grade;
import com.boventech.gplearn.entity.Graduate;
import com.boventech.gplearn.entity.LearnClass;
import com.boventech.gplearn.entity.SchoolRoll;
import com.boventech.gplearn.entity.SchoolSpace;
import com.boventech.gplearn.entity.User;
import com.boventech.gplearn.entity.User.UserType;
import com.boventech.gplearn.exception.UserDestroyInCASFaildException;
import com.boventech.gplearn.exception.UserDestroyInStudySpaceFaildException;
import com.boventech.gplearn.exception.UserInfoPushToStudySpaceClassRoomFaildException;
import com.boventech.gplearn.exception.UserInfoPushToStudySpaceFaildException;
import com.boventech.gplearn.exception.UserInfoSendCASFaildException;
import com.boventech.gplearn.service.AccountService;
import com.boventech.gplearn.service.DisciplineService;
import com.boventech.gplearn.service.GradeService;
import com.boventech.gplearn.service.GraduateService;
import com.boventech.gplearn.service.SchoolRollService;
import com.boventech.gplearn.service.SchoolSpaceService;
import com.boventech.gplearn.service.UserService;
import com.boventech.gplearn.util.CASPlatformHttpClient;
import com.boventech.gplearn.util.StudyPlatformHttpClient;

@Service
@Transactional
public class UserServiceImpl implements UserService {


    @Autowired
    private UserDao userDao;

    @Autowired
    private SchoolRollDao schoolRollDao;

	@Autowired
	private AccountService accountService;

	@Autowired
	private SchoolSpaceService schoolSpaceService;

	@Autowired
	private SchoolRollService schoolRollService;

	@Autowired
	private GradeService gradeService;

	@Autowired
	private GraduateService graduateService;
	
	@Autowired
	private DisciplineService disciplineService;

	@Override
	public void save(User t) {
		this.userDao.save(t);
	}

	@Override
	public void save(List<User> users) {
		this.userDao.save(users);
	}

	@Override
	public void delete(User t) {
		this.userDao.delete(t);
	}

	@Override
	public void delete(Long id) {
		this.userDao.deleteById(id);
	}

	@Override
	public void update(User t) {
		this.userDao.update(t);
	}

	@Override
	public User findById(Long id) {
		return this.userDao.findByID(id);
	}

	@Override
	public Long getMaxIndex() {
		return this.userDao.getMaxIndex();
	}

	@Override
	public List<User> generateUsers(List<Account> accounts,
			EnrollmentPlan enrollmentPlan) {
		List<User> users = new ArrayList<User>();
		for (Account account : accounts) {
			User user = new User();
			user.setUserType(UserType.Student);
			user.setLoginName(getLoginName(enrollmentPlan));
			user.setPassword((new BASE64Encoder()).encode(account.getIdNumber()
					.getBytes()));
			user.setAccount(account);
			user.setBatch(enrollmentPlan.getBatch());
			user.setActive(false);
			user.setRealName(account.getName());
			users.add(user);
		}
		return users;
	}

	private String getLoginName(EnrollmentPlan enrollmentPlan) {
		String name = "gp";
		name += getYear();
		name += getAreaCode(enrollmentPlan);
		name += getDisciplineCode(enrollmentPlan);
		return name;
	}


	private String getYear() {
		@SuppressWarnings("deprecation")
		String year = String.valueOf(new Date().getYear() % 100);
		return year;
	}

	private String getAreaCode(EnrollmentPlan enrollmentPlan) {
		return enrollmentPlan.getLearnClass().getLearnArea().getElCode().split(
				"-")[0];
	}

	private String getDisciplineCode(EnrollmentPlan enrollmentPlan) {
		return enrollmentPlan.getLearnClass().getLearnProject().getDiscipline()
				.getCode();
	}

	@Override
	public List<User> listAllWithPagnate(Integer page) {
		return this.userDao.listAllWithPagnate(page);
	}

	@Override
	public List<User> listAllWithoutPagnate() {
		return this.userDao.listAllWithoutPagnate();
	}

	@Override
	public boolean checkEntityExsitByLoginName(String loginName) {
		return userDao.checkEntityExsitByLoginName(loginName);
	}

    @Override
    public User findByLoginName(String loginName) {
        return userDao.findByLoginName(loginName);
    }


    @Override
    public List<User> listSearchWithPagnate(Integer page, User user, Account account, Batch batch,
            LearnClass learnClass) {       
        return userDao.listSerchWithPagnate(page, user, account, batch,learnClass);
    }
    
    @Override
    public List<User> listSearchWithoutPagnate(User user, Account account, Batch batch,
            LearnClass learnClass) {        
        return userDao.listSerchWithoutPagnate(user, account, batch,learnClass);
    }

	@Transactional(rollbackFor = { UserInfoSendCASFaildException.class,
			UserInfoPushToStudySpaceFaildException.class,
			UserInfoPushToStudySpaceClassRoomFaildException.class })
	@Override
	public void saveAllAccountInformation(List<Account> accounts,
			EnrollmentPlan enrollmentPlan)
			throws UserInfoSendCASFaildException,
			UserInfoPushToStudySpaceFaildException,
			UserInfoPushToStudySpaceClassRoomFaildException {
		this.accountService.save(accounts);

		// 批量生成学校空间和账号
		List<User> users = generateUsers(accounts, enrollmentPlan);
		List<SchoolSpace> schoolSpaces = this.schoolSpaceService
				.generateSchoolSpaces(accounts, enrollmentPlan);
		this.schoolSpaceService.save(schoolSpaces);
		save(users);

		// 批量生成成绩和学籍
		List<SchoolRoll> schoolRolls = this.schoolRollService
				.generateSchoolRolls(users, enrollmentPlan);
		List<Grade> grades = this.gradeService.generateGrades(users);
		this.schoolRollService.save(schoolRolls);
		this.gradeService.save(grades);

		// 批量生成结业信息
		List<Graduate> graduates = this.graduateService
				.generateGraduates(grades);
		this.graduateService.save(graduates);

		// 2013.5.16 si.li
		// 将用户信息推送到CAS
		pushUserToTheCAS(users);

		// 将用户推送到学科空间
		String disciplineId = enrollmentPlan.getLearnClass().getLearnProject()
				.getDiscipline().getId().toString();
		pushUserToTheStudySpace(users, disciplineId);

		// 将用户推送到学科空间的班级小组
		pushUserToTheStudySpaceClassRoom(users, disciplineId, enrollmentPlan
				.getLearnClass().getLearnClassStudySpaceId());

	}

	/**
	 * TODO 4将账号推送到CAS平台[集成完成]
	 * 
	 * @throws UserInfoSendCASFaildException
	 */
	private void pushUserToTheCAS(List<User> users)
			throws UserInfoSendCASFaildException {
		CASPlatformHttpClient client = new CASPlatformHttpClient();
		Integer statusCode = 0;
		for (User user : users) {
			statusCode = client.createUserToCAS(user);
			if (statusCode != 200) {
				throw new UserInfoSendCASFaildException();
			}
		}
	}

	/**
	 * TODO 5将学科用户推送到班级小组[集成完成]
	 * 
	 * @param user
	 * @param disciplineId
	 * @param learnClassAccessSpaceId
	 * @return
	 * @throws UserInfoPushToStudySpaceClassRoomFaildException
	 */
	private void pushUserToTheStudySpaceClassRoom(List<User> users,
			String disciplineId, String learnClassAccessSpaceId)
			throws UserInfoPushToStudySpaceClassRoomFaildException {
		StudyPlatformHttpClient client = new StudyPlatformHttpClient();
		Integer statusCode = 0;
		for (User user : users) {
			statusCode = client.createUserToStudySpaceClassRoom(user,
					learnClassAccessSpaceId, disciplineId);
			if (statusCode != 200) {
				throw new UserInfoPushToStudySpaceClassRoomFaildException();
			}
		}
	}

	/**
	 * TODO 6将用户推送到学科空间[集成完成]
	 * 
	 * @param user
	 * @param disciplineId
	 * @param learnClassAccessSpaceId
	 * @return
	 * @throws UserInfoPushToStudySpaceFaildException
	 */
	private void pushUserToTheStudySpace(List<User> users, String disciplineId)
			throws UserInfoPushToStudySpaceFaildException {
		StudyPlatformHttpClient client = new StudyPlatformHttpClient();
		Integer statusCode = 0;
		for (User user : users) {
			statusCode = client.createUserToStudySpace(user, disciplineId);
			if (statusCode != 200) {
				throw new UserInfoPushToStudySpaceFaildException();
			}
		}

	}

	/**
	 * 设置学科专家到学科空间
	 */
	@Transactional(rollbackFor={UserInfoSendCASFaildException.class,UserInfoPushToStudySpaceFaildException.class})
	@Override
	public void pushUserToTheStudySpace(User user,Discipline discipline) throws UserInfoSendCASFaildException, UserInfoPushToStudySpaceFaildException {
		save(user);
		User savedUser =findByLoginName(user.getLoginName());
		discipline.setPersonInCharge(savedUser);
		this.disciplineService.update(discipline);
		// 将学科专家信息存入CAS
		sendDisciplineExpertToTheCAS(user);
		// 将学科专家信息存入学习平台空间
		sendDisciplineExpertToTheStudySpace(user, discipline.getId());
	}
	
	/**
	 * TODO 7设置学科专家到CAS
	 * @throws UserInfoSendCASFaildException 
	 */
	private void sendDisciplineExpertToTheCAS(User user) throws UserInfoSendCASFaildException{
		CASPlatformHttpClient client = new CASPlatformHttpClient();
		Integer statusCode=client.createUserToCAS(user);
		if(statusCode!=200){
			throw new UserInfoSendCASFaildException();
		}
	}
	
	/**
	 * TODO 8设置学科专家到学习空间
	 * @param user
	 * @param disciplineId
	 * @throws UserInfoPushToStudySpaceFaildException
	 */
	private void sendDisciplineExpertToTheStudySpace(User user,Long disciplineId) throws UserInfoPushToStudySpaceFaildException{
		StudyPlatformHttpClient client = new StudyPlatformHttpClient();
		Integer statusCode=client.createUserToStudySpace(user, disciplineId.toString());
		if(statusCode!=200){
			throw new UserInfoPushToStudySpaceFaildException();
		}
	}
	
	/**
	 * TODO 9 从学习平台和CAS中删除用户
	 * @throws UserDestroyInStudySpaceFaildException 
	 * @throws UserDestroyInCASFaildException 
	 */
	private void destroyUserAllInformation(User user) throws UserDestroyInStudySpaceFaildException, UserDestroyInCASFaildException{
		SchoolRoll schoolRoll=schoolRollService.findByUserNewest(user);
		Discipline discipline=schoolRoll.getLearnClass().getLearnProject().getDiscipline();
		//删除用户在学科的记录
		StudyPlatformHttpClient client = new StudyPlatformHttpClient();
		Integer statusCode = client.detroyUserFromStudySpace(user.getLoginName(),discipline.getId().toString());
		if(statusCode!=200){
			throw new UserDestroyInStudySpaceFaildException();
		}
		//删除用户在CAS的记录
		CASPlatformHttpClient casClient = new CASPlatformHttpClient();
		statusCode=casClient.destroyUserFromCAS(user.getLoginName());
		if(statusCode!=200){
			throw new UserDestroyInCASFaildException();
		}
	}

	@Transactional(rollbackFor={UserDestroyInCASFaildException.class,UserDestroyInStudySpaceFaildException.class})
	@Override
	public void destroyUser(User user, List<SchoolRoll> schoolRolls) throws UserDestroyInStudySpaceFaildException, UserDestroyInCASFaildException {
		Grade grade=this.gradeService.findByUser(user);
		Graduate graduate=this.graduateService.findByGrade(grade);
        this.graduateService.delete(graduate);
        this.gradeService.delete(grade);
        this.schoolRollService.delete(schoolRolls);
        this.accountService.delete(user.getAccount());
        delete(user.getId());
        destroyUserAllInformation(user);
	}

}
