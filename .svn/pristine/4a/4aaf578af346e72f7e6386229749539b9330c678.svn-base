package com.boventech.gplearn.controller;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.List;

import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import sun.misc.BASE64Encoder;

import com.boventech.gplearn.entity.Constants;
import com.boventech.gplearn.entity.Discipline;
import com.boventech.gplearn.entity.Discipline.LearnRange;
import com.boventech.gplearn.entity.LearnLevel;
import com.boventech.gplearn.entity.LearnSpeacialty;
import com.boventech.gplearn.service.DisciplineService;
import com.boventech.gplearn.service.LearnLevelService;
import com.boventech.gplearn.service.LearnSpeacialtyService;
import com.boventech.gplearn.util.LoadProperties;

@Controller
@RequestMapping(value = "/discipline")
public class DisciplineController extends ApplicationController {

	private static final Logger LOGGER = LoggerFactory
			.getLogger(DisciplineController.class);

	@Autowired
	private DisciplineService disciplineService;

	@Autowired
	private LearnLevelService learnLevelService;

	@Autowired
	private LearnSpeacialtyService learnSpeacialtyService;

	/**
	 * List
	 * 
	 * @return
	 */
	@RequestMapping(method = RequestMethod.GET)
	public String index(Model model, Integer page) {
		List<Discipline> list = disciplineService.listWithPagination(page);
		model.addAttribute("list", list);
		return "discipline/index";
	}

	/**
	 *Jump to the Edit Page
	 * 
	 * @return
	 */
	@RequestMapping(value = "/{id}/update")
	public String edit(@PathVariable Long id, RedirectAttributes redirectAttrs,
			Model model) {
		Discipline discipline = disciplineService.findById(id);
		if (null == discipline) {
			sendErrorMessageWithParameterWhenRedirect(redirectAttrs,
					"common.obj.notfound", "id:" + id);
			return "redirect:/discipline";
		}
		initSelectData(model);
		model.addAttribute("discipline", discipline);
		return "discipline/update";
	}

	/**
	 * UPADATE Discipline
	 * 
	 * @return
	 */
	@RequestMapping(value = "/{id}", method = RequestMethod.PUT)
	public String update(Discipline discipline, Model model,
			RedirectAttributes redirectAttr, Long learnSpeacialtyId,
			Long learnLevelId) {
		if (null == learnLevelId || null == learnSpeacialtyId) {
			initSelectData(model);
			model.addAttribute("discipline", discipline);
			sendErrorMessage(model, "select.value.null");
			return "discipline/update";
		}
		discipline.setLearnLevel(learnLevelService.findById(learnLevelId));
		discipline.setLearnSpeacialty(learnSpeacialtyService
				.findById(learnSpeacialtyId));

		if (disciplineService.checkExsitCodeWithOutCurrent(discipline,
				discipline.getCode())) {
			initSelectData(model);
			model.addAttribute("discipline", discipline);
			sendErrorMessage(model, "discipline.code.exsit");
			return "discipline/update";
		}

		if (disciplineService
				.checkExsitBylearnSpeacialtyIdAndLearnLevelIdWithoutCurrent(discipline)) {
			sendErrorMessageWithParameter(model, "common.name.exsit",
					discipline.getLearnLevel().getName()
							+ discipline.getLearnSpeacialty().getName());
			model.addAttribute("discipline", discipline);
			return "discipline/update";
		}

		disciplineService.update(discipline);
		sendNoticeWhenRedirect(redirectAttr, "common.update.success");
		return "redirect:/discipline";
	}

	/**
	 * Jump to the create Page
	 * 
	 * @return
	 */
	@RequestMapping(value = "/create")
	public String create(Model model, RedirectAttributes redirectAttrs) {
		if (learnLevelService.listActive().size() <= 0) {
			sendErrorMessageWhenRedirect(redirectAttrs,
					"discipline.emptylearnlevel");
			return "redirect:/learnlevel";
		}
		if (learnSpeacialtyService.listActive().size() <= 0) {
			sendErrorMessageWhenRedirect(redirectAttrs,
					"discipline.emptylearnspeacialty");
			return "redirect:/learnspeacialty";
		}
		initSelectData(model);
		return "discipline/create";
	}

	/**
	 * Save
	 * 
	 * @return
	 */
	@Transactional
	@RequestMapping(method = RequestMethod.POST)
	public String save(Discipline discipline, Long learnLevelId,
			Long learnSpeacialtyId, Model model, RedirectAttributes redirectAttr) {
		if (null == learnLevelId || null == learnSpeacialtyId) {
			initSelectData(model);
			model.addAttribute("discipline", discipline);
			sendErrorMessage(model, "select.value.null");
			return "discipline/create";
		}
		discipline.setLearnLevel(learnLevelService.findById(learnLevelId));
		discipline.setLearnSpeacialty(learnSpeacialtyService
				.findById(learnSpeacialtyId));

		if (disciplineService.checkExsitCode(discipline.getCode())) {
			initSelectData(model);
			model.addAttribute("discipline", discipline);
			sendErrorMessage(model, "discipline.code.exsit");
			return "discipline/create";
		}

		if (disciplineService.checkExsitByLearnSpeacialtyIdAndLearnLevelId(
				discipline.getLearnSpeacialty().getId(), discipline
						.getLearnLevel().getId())) {
			sendErrorMessageWithParameter(model, "common.name.exsit",
					discipline.getLearnLevel().getName()
							+ discipline.getLearnSpeacialty().getName());
			initSelectData(model);
			model.addAttribute("discipline", discipline);
			return "discipline/create";
		}
		disciplineService.save(discipline);
		// 推送信息到学习平台
		Discipline savedDiscipline=disciplineService.findByLearnLevelIdAndLearnSpeacialtyId(discipline
				.getLearnLevel().getId(), discipline.getLearnSpeacialty()
				.getId());
		try {
			sendDisciplineInfoToStudyPlatForm(savedDiscipline);
		} catch (ClientProtocolException e) {
			sendErrorMessageWhenRedirect(redirectAttr, "studyspace.sendError");
			LOGGER.error(e.getMessage());
		} catch (IOException e) {
			sendErrorMessageWhenRedirect(redirectAttr, "studyspace.sendError");
			LOGGER.error(e.getMessage());
		}
		return "redirect:/discipline";
	}

	/**
	 * Delete The Discipline
	 * 
	 * @return
	 */
	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
	public String destroy(@PathVariable Long id, RedirectAttributes redirectAttr) {
		// 是否存在
		Discipline discipline = disciplineService.findById(id);
		if (null == discipline) {
			sendErrorMessageWithParameterWhenRedirect(redirectAttr,
					"common.obj.notfound", "id:" + id);
			return "redirect:/discipline";
		}

		// Destroy
		try {
			disciplineService.delete(id);
			sendNoticeWhenRedirect(redirectAttr, "common.destroy.success");
		} catch (Exception e) {
			sendErrorMessageWithParameterWhenRedirect(redirectAttr,
					"common.reference.delete", discipline.getLearnLevel()
							.getName()
							+ discipline.getLearnSpeacialty().getName());
		}

		return "redirect:/discipline";
	}

	/**
	 * TODO 添加学科大空间的数据推送功能 （学习空间、校本研修空间）
	 * @throws IOException 
	 * @throws ClientProtocolException 
	 * 
	 */
	private boolean sendDisciplineInfoToStudyPlatForm(Discipline discipline) throws ClientProtocolException, IOException {
		DefaultHttpClient defaultClient = new DefaultHttpClient();
		String url = LoadProperties.getProperty(Constants.STUDY_PLATFORM_URL);
		String createDisciplineSpaceUrl = LoadProperties
				.getProperty(Constants.STUDY_PALTFORM_CREATESPACE_URL);
		String postUrl = url + createDisciplineSpaceUrl;
		HttpPost post = new HttpPost(postUrl);
		String account=LoadProperties.getProperty(Constants.STUDY_PLATFORM_X_ACCOUNT);
		String secret=LoadProperties.getProperty(Constants.STUDY_PLATFORM_X_SECRET);
		String courseId=Constants.STUDY_PLATFORM_DISCIPLINESPACE_PREFIX+discipline.getId();
		String title=discipline.getLearnLevel().getName()+discipline.getLearnSpeacialty().getName();
		BASE64Encoder encoder=new BASE64Encoder();
		post.setHeader(Constants.STUDY_PLATFORM_X_ACCOUNT,encoder.encode(account.getBytes()));
		post.setHeader(Constants.STUDY_PLATFORM_X_SECRET, encoder.encode(secret.getBytes()));
		post.setHeader(Constants.STUDY_PLATFORM_COURSEID,courseId);
		post.setHeader(Constants.STUDY_PLATFORM_TITLE,encoder.encode(title.getBytes()));
		
			HttpResponse response = defaultClient.execute(post);
			String json = translateInputStreamToString(response.getEntity().getContent());
			Integer statusCode = response.getStatusLine().getStatusCode();
			System.out.println("________________________"+json+"___________"+statusCode+"____________");
			post.abort();
			if (statusCode == 200) {
				return true;
			}
		return false;
	}

	private void initSelectData(Model model) {
		List<LearnLevel> learnLevelList = learnLevelService.listActive();
		List<LearnSpeacialty> learnSpeacialtyList = learnSpeacialtyService
				.listActive();
		LearnRange[] learnRages = LearnRange.values();
		model.addAttribute("learnRages", learnRages);
		model.addAttribute("learnLevelList", learnLevelList);
		model.addAttribute("learnSpeacialtyList", learnSpeacialtyList);

	}
	
	private static String translateInputStreamToString(InputStream is){
    	StringBuffer sb = new StringBuffer();
    	BufferedReader reader= new BufferedReader(new InputStreamReader(is));
    	
    	String line=null;
    	try {
			while((line=reader.readLine())!=null){
				sb.append(line);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
    	finally{
    		try {
				is.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
    	}
    	
    	return sb.toString();
    }
}
