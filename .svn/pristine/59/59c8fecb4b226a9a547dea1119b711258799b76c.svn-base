package com.boventech.gplearn.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.boventech.gplearn.dao.DisciplineDao;
import com.boventech.gplearn.entity.Discipline;
import com.boventech.gplearn.service.DisciplineService;

@Service
@Transactional
public class DisciplineServiceImpl implements DisciplineService {

	
	@Autowired
	private DisciplineDao disciplineDao;
	
	@Override
	public List<Discipline> listAll() {
		return disciplineDao.listAll();
	}

	@Override
	public List<Discipline> listWithPagination(Integer page) {
		return disciplineDao.listWithPagination(page);
	}

	@Override
	public void delete(Discipline t) {
		disciplineDao.delete(t);
	}

	@Override
	public void delete(Long id) {
		disciplineDao.deleteById(id);
	}

	@Override
	public Discipline findById(Long id) {
		return disciplineDao.findByID(id);
	}

	@Override
	public void save(Discipline t) {
		disciplineDao.save(t);
	}

	@Override
	public void update(Discipline t) {
		disciplineDao.update(t);
	}

	@Override
	public boolean checkExsitByLearnLevelId(Long learnLevelId) {
		return disciplineDao.checkExsitByLearnLevelId(learnLevelId);
	}

	@Override
	public boolean checkExsitByLearnSpeacialtyId(Long learnSpeacialtyId) {
		return disciplineDao.checkExsitByLearnSpeacialtyId(learnSpeacialtyId);
	}

	@Override
	public boolean checkExsitByLearnSpeacialtyIdAndLearnLevelId(
			Long learnSpeacialtyId, Long learnLevelId) {
		return disciplineDao.checkExsitByLearnSpeacialtyIdAndLearnLevelId(learnLevelId, learnSpeacialtyId);
	}

	@Override
	public boolean checkExsitBylearnSpeacialtyIdAndLearnLevelIdWithoutCurrent(
			Discipline discipline) {
		return disciplineDao.checkExitBylearnSpeacialtyIdAndLearnLevelIdWithoutCurrent(discipline);
	}

	@Override
	public boolean checkExsitCode(String code) {
		return disciplineDao.checkExsitCode(code);
	}

	@Override
	public boolean checkExsitCodeWithOutCurrent(Discipline discipline,String code) {
		return disciplineDao.checkExsitCodeWithOutCurrent(discipline,code);
	}

	@Override
	public boolean checkExsit() {
		return !disciplineDao.listAll().isEmpty();
	}

	@Override
	public Discipline findByLearnLevelIdAndLearnSpeacialtyId(Long learnLevelId,
			Long learnSpeacialtyId) {
		return disciplineDao.findByLearnLevelIdAndLearnSpeacialtyId(learnLevelId, learnSpeacialtyId);
	}



}
