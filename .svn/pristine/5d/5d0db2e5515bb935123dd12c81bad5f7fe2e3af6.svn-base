package com.boventech.gplearn.controller;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import sun.misc.BASE64Encoder;

import com.boventech.gplearn.controller.ApplicationController;
import com.boventech.gplearn.entity.Discipline;
import com.boventech.gplearn.entity.User;
import com.boventech.gplearn.entity.User.UserType;
import com.boventech.gplearn.exception.UserInfoPushToStudySpaceFaildException;
import com.boventech.gplearn.exception.UserInfoSendCASFaildException;
import com.boventech.gplearn.service.BatchService;
import com.boventech.gplearn.service.DisciplineService;
import com.boventech.gplearn.service.UserService;
import com.boventech.gplearn.util.CASPlatformHttpClient;
import com.boventech.gplearn.util.StudyPlatformHttpClient;

@Controller
@RequestMapping(value="/discipline/{disciplineId}/personincharge")
public class DisciplinePersonInChargeController extends ApplicationController {

	private static final Logger LOGGER = LoggerFactory.getLogger(DisciplinePersonInChargeController.class);
	
	@Autowired
	private DisciplineService disciplineService;
	
	@Autowired
	private BatchService batchService;
	
	
	@Autowired
	private UserService userService;
	
	@RequestMapping(value="/create")
	public String create(@PathVariable Long disciplineId,Model model,RedirectAttributes redirectAttr){
		Discipline selectedDiscipline= disciplineService.findById(disciplineId);
		if(checkEntityEmpty(selectedDiscipline)){
			sendErrorMessageWhenRedirect(redirectAttr, "discipline.notfound");
			return "redirect:/discipline";
		}
		model.addAttribute("discipline", selectedDiscipline);
		return "discipline/personincharge/create";
	}
	
	@Transactional
	@RequestMapping(method=RequestMethod.POST)
	public String save(@PathVariable Long disciplineId,User user,RedirectAttributes redirectAttr){
		Discipline selectedDiscipline= disciplineService.findById(disciplineId);
		if(checkEntityEmpty(selectedDiscipline)){
			sendErrorMessageWhenRedirect(redirectAttr, "discipline.notfound");
		}
		else{
			if(userService.checkEntityExsitByLoginName(user.getLoginName())){
				sendErrorMessageWhenRedirect(redirectAttr, "user.entity.exsit");
			}
			else{
				if(null==batchService.getCurrentBatch()){
					sendErrorMessageWhenRedirect(redirectAttr,
					"learnPlan.currentbatch.null");
					return "redirect:/batch";
				}
				user.setBatch(batchService.getCurrentBatch());
				user.setActive(true);
				user.setUserType(UserType.Subject_Specialists);
				user.setPassword(new BASE64Encoder().encode(user.getPassword().getBytes()));
				
				userService.save(user);
				
				User savedUser  = userService.findByLoginName(user.getLoginName());
				selectedDiscipline.setPersonInCharge(savedUser);
				disciplineService.update(selectedDiscipline);
				
				try {
					//将学科专家信息存入CAS
					sendDisciplineExpertToTheCAS(user);
					//将学科专家信息存入学习平台空间
					sendDisciplineExpertToTheStudySpace(user,selectedDiscipline.getId());
				} catch (UserInfoSendCASFaildException e) {
					LOGGER.error(e.getMessage());
				} catch (UserInfoPushToStudySpaceFaildException e) {
					LOGGER.error(e.getMessage());
				}
				
				return "redirect:/discipline/";
			}
		}
		
		return "redirect:/discipline";
	}
	
	/**
	 * TODO 7设置学科专家到CAS
	 * @throws UserInfoSendCASFaildException 
	 */
	private void sendDisciplineExpertToTheCAS(User user) throws UserInfoSendCASFaildException{
		CASPlatformHttpClient client = new CASPlatformHttpClient();
		Integer statusCode=client.createUserToCAS(user);
		if(statusCode!=200){
			throw new UserInfoSendCASFaildException();
		}
	}
	
	/**
	 * TODO 8设置学科专家到学习空间
	 * @param user
	 * @param disciplineId
	 * @throws UserInfoPushToStudySpaceFaildException
	 */
	private void sendDisciplineExpertToTheStudySpace(User user,Long disciplineId) throws UserInfoPushToStudySpaceFaildException{
		StudyPlatformHttpClient client = new StudyPlatformHttpClient();
		Integer statusCode=client.createUserToStudySpace(user, disciplineId.toString());
		if(statusCode!=200){
			throw new UserInfoPushToStudySpaceFaildException();
		}
	}

}

	