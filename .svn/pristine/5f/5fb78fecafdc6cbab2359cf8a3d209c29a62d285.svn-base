package com.boventech.gplearn.controller;

import java.io.IOException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.http.HttpStatus;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.boventech.gplearn.entity.Batch;
import com.boventech.gplearn.entity.Discipline;
import com.boventech.gplearn.entity.SchoolSpace;
import com.boventech.gplearn.entity.VideoInfo;
import com.boventech.gplearn.service.BatchService;
import com.boventech.gplearn.service.DisciplineService;
import com.boventech.gplearn.service.SchoolSpaceService;
import com.boventech.gplearn.service.VideoService;

@Controller
@RequestMapping(value="/video")
public class VideoController extends ApplicationController {

	private static final Logger LOGGER = LoggerFactory.getLogger(VideoController.class);
	
	private static final String SITE_ID="u_siteid";
	
	private static final String VIDEO_ID="u_videoid";
	
	private static final String VIDEO_LENGTH="u_videolength";
	
	@Autowired
	private DisciplineService disciplineService;
	
	@Autowired
	private SchoolSpaceService schoolSpaceService;
	
	@Autowired
	private VideoService videoService;
	
	@Autowired
	private BatchService batchService;
	
	
	@RequestMapping(value="/update",method=RequestMethod.POST)
	public void updateVideoInfo(HttpServletRequest request,HttpServletResponse response){
		String siteId=request.getHeader(SITE_ID);
		String videoId=request.getHeader(VIDEO_ID);
		Long videoLength=Long.parseLong(request.getHeader(VIDEO_LENGTH));
		VideoInfo videoInfo = new VideoInfo();
		Long disciplineId=null;
		
		//判断是学校空间的
		if(siteId.indexOf("kc")!=-1){
			disciplineId = Long.parseLong(siteId.substring(2));
		}
		else if(siteId.indexOf("xbyx")!=-1){
			disciplineId = Long.parseLong(siteId.substring(4));
		}
		else if(siteId.indexOf("school")!=-1){
			Long schoolSpaceId  = Long.parseLong(siteId.substring(6));
			SchoolSpace schoolSpace = schoolSpaceService.findById(schoolSpaceId);
			videoInfo.setSchoolSpace(schoolSpace);
		}
		else{
			response.setStatus(HttpStatus.SC_BAD_REQUEST);
			try {
				response.getWriter().write("siteId is wrong!!!");
			} catch (IOException e) {
				LOGGER.error(e.getMessage());
			}
		}
		if(null!=disciplineId){
			Discipline discipline = disciplineService.findById(disciplineId);
			videoInfo.setDiscipline(discipline);
		}
		videoInfo.setVideoId(videoId);
		if(videoService.checkVideoExsit(videoInfo)){
			response.setStatus(HttpStatus.SC_BAD_REQUEST);
			try {
				response.getWriter().write("video Already Exsit!!!");
			} catch (IOException e) {
				LOGGER.error(e.getMessage());
			}
		}else{
			Batch batch = batchService.getCurrentBatch();
			if(checkEntityEmpty(batch)){
				response.setStatus(HttpStatus.SC_BAD_REQUEST);
				try {
					response.getWriter().write("CurrentBatch Not Found!!!");
				} catch (IOException e) {
					LOGGER.error(e.getMessage());
				}
			}
			else{
				videoInfo.setBatch(batch);
				videoInfo.setVideoLength(videoLength);
				videoService.save(videoInfo);
				response.setStatus(HttpStatus.SC_OK);
			}
		}
	}
	
	@RequestMapping(value="/delete",method=RequestMethod.DELETE)
	public void delete(HttpServletRequest request, HttpServletResponse response){
		String siteId=request.getHeader(SITE_ID);
		String videoId=request.getHeader(VIDEO_ID);
		Long disciplineId=null;
		VideoInfo videoInfo = new VideoInfo();
		
		//判断是学校空间的
		if(siteId.indexOf("kc")!=-1){
			disciplineId = Long.parseLong(siteId.substring(2));
		}
		else if(siteId.indexOf("xbyx")!=-1){
			disciplineId = Long.parseLong(siteId.substring(4));
		}
		else if(siteId.indexOf("school")!=-1){
			Long schoolSpaceId  = Long.parseLong(siteId.substring(6));
			SchoolSpace schoolSpace = schoolSpaceService.findById(schoolSpaceId);
			videoInfo.setSchoolSpace(schoolSpace);
		}
		else{
			response.setStatus(HttpStatus.SC_BAD_REQUEST);
			try {
				response.getWriter().write("siteId is wrong!!!");
			} catch (IOException e) {
				LOGGER.error(e.getMessage());
			}
		}
		if(null!=disciplineId){
			Discipline discipline = disciplineService.findById(disciplineId);
			videoInfo.setDiscipline(discipline);
		}
		videoInfo.setVideoId(videoId);
		
		if(videoService.checkVideoExsit(videoInfo)){
			VideoInfo hasInfo = videoService.findByVideoIdAndSiteId(videoInfo);
			videoService.delete(hasInfo.getId());
			response.setStatus(HttpStatus.SC_OK);
		}
		
	}
}
