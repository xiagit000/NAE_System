/*
 * Copyright 2010. 
 * 
 * This document may not be reproduced, distributed or used 
 * in any manner whatsoever without the expressed written 
 * permission of Boventech Corp. 
 * 
 * $Rev: Rev $
 * $Author: Author $
 * $LastChangedDate: LastChangedDate $
 *
 */

package com.boventech.gplearn.controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;


import com.boventech.gplearn.annotation.RequiredPrivilege;
import com.boventech.gplearn.entity.Account;
import com.boventech.gplearn.entity.Batch;

import com.boventech.gplearn.entity.LearnClass;
import com.boventech.gplearn.entity.Privilege;
import com.boventech.gplearn.entity.SchoolRoll;
import com.boventech.gplearn.entity.User;

import com.boventech.gplearn.service.BatchService;


import com.boventech.gplearn.exception.UserDestroyInCASFaildException;
import com.boventech.gplearn.exception.UserDestroyInStudySpaceFaildException;

import com.boventech.gplearn.service.LearnClassService;
import com.boventech.gplearn.service.SchoolRollService;
import com.boventech.gplearn.service.UserService;
import com.boventech.gplearn.util.ExcelExporter;
import com.boventech.gplearn.util.UserFiller;
import com.google.common.base.Strings;

@Controller
@RequestMapping(value = "/user")
public class UserController extends ApplicationController {

    private Logger logger = Logger.getLogger(this.getClass().getName());

    @Autowired
    private UserService userService;

    @Autowired
    private SchoolRollService schoolRollService;


    @Autowired
    private LearnClassService learnClassService;

    @Autowired
    private BatchService batchService;


    @RequiredPrivilege(value={Privilege.SYSTEM_USER})
    @RequestMapping(method = RequestMethod.GET)
    public String index(Model model,HttpServletRequest request,Integer page,User user,Account account,String batchId, String learnClassId) {
    	setSiteBarActive("xw", "user", request);
        List<Batch> batchlist=this.batchService.listAll();
        List<LearnClass> learnClasses=this.learnClassService.listAll();
        model.addAttribute("batchList", batchlist );
        model.addAttribute("learnClassList", learnClasses);
        Batch batch=null;
        LearnClass learnClass=null;
        if(!Strings.isNullOrEmpty(batchId)){
            batch=this.batchService.findById(Long.parseLong(batchId));
        }
        if(!Strings.isNullOrEmpty(learnClassId)){
            learnClass=this.learnClassService.findById(Long.parseLong(learnClassId));  
        }
        model.addAttribute("users", this.userService.listSearchWithPagnate(page, user, account,batch, learnClass));
        return "user/index";
    }

    @RequiredPrivilege(value={Privilege.SYSTEM_USER})
    @RequestMapping(value = "{id}", method = RequestMethod.DELETE)
    public String destory(Model model, @PathVariable String id, final RedirectAttributes redirectAttrs) {
        User user = this.userService.findById(Long.parseLong(id));
        List<SchoolRoll> schoolRolls = this.schoolRollService.findSchoolRollsByUser(user);
        try {
        	this.userService.destroyUser(user, schoolRolls);
            sendNoticeWhenRedirect(redirectAttrs, "common.destroy.success");
		} catch (UserDestroyInStudySpaceFaildException e) {
			logger.error(e.getMessage());
			sendErrorMessageWhenRedirect(redirectAttrs, "user.space.destroy.error");
		} catch (UserDestroyInCASFaildException e) {
			logger.error(e.getMessage());
			sendErrorMessageWhenRedirect(redirectAttrs, "user.cas.destroy.error");
		}
        return "redirect:/user";
    }

    @RequiredPrivilege(value={Privilege.SYSTEM_USER})
    @RequestMapping(value = "/exportExcel", method = RequestMethod.GET)
    public void exportExcel(Model model, HttpServletResponse response,User user,Account account,String batchId, String learnClassId) {
        Batch batch=null;
        LearnClass learnClass=null;
        if(!Strings.isNullOrEmpty(batchId)){
            batch=this.batchService.findById(Long.parseLong(batchId));
        }
        if(!Strings.isNullOrEmpty(learnClassId)){
            learnClass=this.learnClassService.findById(Long.parseLong(learnClassId));  
        }
        new ExcelExporter().exportXLS(response, getHeads(), getMessage("userExcelName"),
                getMessage("user_loginPassword_description"),               
                new UserFiller(this.userService.listSearchWithoutPagnate(user, account, batch, learnClass)));
    }

    private List<String> getHeads() {
        List<String> heads = new ArrayList<String>();
        heads.add(getMessage("user_id"));
        heads.add(getMessage("user_loginName"));
        heads.add(getMessage("user_name"));
        heads.add(getMessage("user_idType"));
        heads.add(getMessage("user_idNumber"));
        heads.add(getMessage("user_batch"));
        return heads;
    }

}
