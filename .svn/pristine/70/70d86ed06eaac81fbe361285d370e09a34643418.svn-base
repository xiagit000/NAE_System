/*
 * Copyright 2010. 
 * 
 * This document may not be reproduced, distributed or used 
 * in any manner whatsoever without the expressed written 
 * permission of Boventech Corp. 
 * 
 * $Rev: Rev $
 * $Author: Author $
 * $LastChangedDate: LastChangedDate $
 *
 */

package com.boventech.gplearn.controller;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.boventech.gplearn.annotation.RequiredPrivilege;
import com.boventech.gplearn.entity.Grade;
import com.boventech.gplearn.entity.GraduateStandard;
import com.boventech.gplearn.entity.Privilege;
import com.boventech.gplearn.entity.User;
import com.boventech.gplearn.service.BatchService;
import com.boventech.gplearn.service.GradeService;
import com.boventech.gplearn.service.GraduateStandardService;

@Controller
@RequestMapping(value = "/grade")
public class GradeController extends ApplicationController {

    @Autowired
    private GradeService gradeService;
    
    @Autowired
    private GraduateStandardService graduateStandardService;
    
    @Autowired
    private BatchService batchService;

    @RequiredPrivilege(value={Privilege.SYSTEM_GRADE})
    @RequestMapping(method = RequestMethod.GET)
    public String index(ModelMap model,HttpServletRequest request, Integer page) {
    	setSiteBarActive("xw","grade", request);
        model.addAttribute("grades", this.gradeService.listAllWithPagnate(page));
        return "grade/index";
    }
    
    @RequiredPrivilege(value={Privilege.STUDENT_SCORE_SEARCH})
    @RequestMapping(value="/show")
    public String show(Model model,HttpServletRequest request){
    	User user = (User)request.getSession().getAttribute("currentUser");
    	Grade grade = gradeService.findByUser(user);
    	GraduateStandard graduateStandard = graduateStandardService.getCurrentBatchGraduateStandard(batchService.getCurrentBatch());
    	if(!checkEntityEmpty(graduateStandard)){
    		model.addAttribute("graduateStandard", graduateStandard);
    	}
    	model.addAttribute("grade", grade);
    	return "role/student/gradeinfo";
    }

}
