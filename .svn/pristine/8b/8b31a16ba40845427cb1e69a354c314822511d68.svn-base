package com.boventech.gplearn.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import sun.misc.BASE64Encoder;

import com.boventech.gplearn.controller.ApplicationController;
import com.boventech.gplearn.entity.Discipline;
import com.boventech.gplearn.entity.User;
import com.boventech.gplearn.entity.User.UserType;
import com.boventech.gplearn.service.BatchService;
import com.boventech.gplearn.service.DisciplineService;
import com.boventech.gplearn.service.UserService;

@Controller
@RequestMapping(value="/discipline/{disciplineId}/personincharge")
public class DisciplinePersonInChargeController extends ApplicationController {

	
	@Autowired
	private DisciplineService disciplineService;
	
	@Autowired
	private BatchService batchService;
	
	
	@Autowired
	private UserService userService;
	
	@RequestMapping(value="/create")
	public String create(@PathVariable Long disciplineId,Model model,RedirectAttributes redirectAttr){
		Discipline selectedDiscipline= disciplineService.findById(disciplineId);
		if(checkEntityEmpty(selectedDiscipline)){
			sendErrorMessageWhenRedirect(redirectAttr, "discipline.notfound");
			return "redirect:/discipline";
		}
		model.addAttribute("discipline", selectedDiscipline);
		return "discipline/personincharge/create";
	}
	
	@Transactional
	@RequestMapping(method=RequestMethod.POST)
	public String save(@PathVariable Long disciplineId,User user,RedirectAttributes redirectAttr){
		Discipline selectedDiscipline= disciplineService.findById(disciplineId);
		if(checkEntityEmpty(selectedDiscipline)){
			sendErrorMessageWhenRedirect(redirectAttr, "discipline.notfound");
		}
		else{
			if(userService.checkEntityExsitByLoginName(user.getLoginName())){
				sendErrorMessageWhenRedirect(redirectAttr, "user.entity.exsit");
			}
			else{
				if(null==batchService.getCurrentBatch()){
					sendErrorMessageWhenRedirect(redirectAttr,
					"learnPlan.currentbatch.null");
					return "redirect:/batch";
				}
				user.setBatch(batchService.getCurrentBatch());
				user.setActive(true);
				user.setUserType(UserType.Subject_Specialists);
				user.setPassword(new BASE64Encoder().encodeBuffer(user.getPassword().getBytes()));
				
				userService.save(user);
				
				User savedUser  = userService.findByLoginName(user.getLoginName());
				selectedDiscipline.setPersonInCharge(savedUser);
				disciplineService.update(selectedDiscipline);
				/**
				 * TODO 设置学科专家，需要写入CAS 
				 */
				return "redirect:/discipline/";
			}
		}
		
		return "redirect:/discipline";
	}
}
