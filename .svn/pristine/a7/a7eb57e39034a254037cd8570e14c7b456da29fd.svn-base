package com.boventech.gplearn.controller;

import java.util.Date;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.boventech.gplearn.entity.SenderNotification;
import com.boventech.gplearn.entity.User;
import com.boventech.gplearn.service.ReceiverNotificationService;
import com.boventech.gplearn.service.SenderNotificationService;
import com.boventech.gplearn.service.UserService;
import com.google.common.collect.Sets;

@Controller
@RequestMapping(value = "/senderNotification")
public class SenderNotificationController {

	@Autowired
	private SenderNotificationService senderNotificationService;

	@Autowired
	private ReceiverNotificationService receiverNotificationService;

	@Autowired
	private UserService userService;

	/**
	 * TODO 从session中获取user
	 */
	@RequestMapping(method = RequestMethod.GET)
	public String index(Model model, HttpServletRequest request, User user,
			Integer page) {
		List<SenderNotification> senderNotifications = this.senderNotificationService
				.listAllNotificationByUser(user, page);
		model.addAttribute("senderNotifications", senderNotifications);
		return "senderNotification/edit";
	}
	
	@RequestMapping(method = RequestMethod.POST)
	public String create(Model model, HttpServletRequest request, Integer page,
			User user, SenderNotification senderNotification, String loginname) {
		setSenderNotification(user, senderNotification, loginname);
		this.senderNotificationService.sendNotification(senderNotification);
		return "redirect:/senderNotification";
	}

	@RequestMapping(value = "{id}", method = RequestMethod.DELETE)
	public String destory(Model model, HttpServletRequest request,
			@PathVariable String id) {
		this.senderNotificationService.delete(Long.parseLong(id));
		return "redirect:/senderNotification";
	}

	@RequestMapping(value = "{id}/edit", method = RequestMethod.GET)
	public String edit(Model model, HttpServletRequest request,
			@PathVariable String id) {
		SenderNotification senderNotification = this.senderNotificationService
				.findById(Long.parseLong(id));
		model.addAttribute("senderNotification", senderNotification);
		return "senderNotification/edit";
	}

	private void setSenderNotification(User user,
			SenderNotification senderNotification, String loginname) {
		senderNotification.setSender(user);
		senderNotification.setTime(new Date());
		User receiver = this.userService.findByLoginName(loginname);
		Set<User> receivers = Sets.newHashSet();
		receivers.add(receiver);
		senderNotification.setReceivers(receivers);
	}
}
