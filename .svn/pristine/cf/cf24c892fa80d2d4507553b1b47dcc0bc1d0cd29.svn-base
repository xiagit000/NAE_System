/*
 * Copyright 2010. 
 * 
 * This document may not be reproduced, distributed or used 
 * in any manner whatsoever without the expressed written 
 * permission of Boventech Corp. 
 * 
 * $Rev: Rev $
 * $Author: Author $
 * $LastChangedDate: LastChangedDate $
 *
 */

package com.boventech.gplearn.service.impl;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.boventech.gplearn.dao.SchoolSpaceDao;
import com.boventech.gplearn.entity.Account;
import com.boventech.gplearn.entity.EnrollmentPlan;
import com.boventech.gplearn.entity.SchoolSpace;
import com.boventech.gplearn.service.SchoolSpaceService;

@Service
@Transactional
public class SchoolSpaceServiceImpl implements SchoolSpaceService{
    
    @Autowired
    private SchoolSpaceDao schoolSpaceDao;

    @Override
    public List<SchoolSpace> generateSchoolSpaces(List<Account> accounts, EnrollmentPlan enrollmentPlan) {
        Set<String> schools=new HashSet<String>();
        List<SchoolSpace> schoolSpaces=new ArrayList<SchoolSpace>();
        for (Account account : accounts) {
            schools.add(account.getSchool());
        }
        for (String school : schools) {
            if(!this.schoolSpaceDao.checkExistBySchoolName(school)){
            SchoolSpace schoolSpace=new SchoolSpace();
            schoolSpace.setSchoolName(school);
            schoolSpace.setBatch(enrollmentPlan.getBatch());
            schoolSpaces.add(schoolSpace);
            }
        }
        return schoolSpaces;
    }

    @Override
    public void save(SchoolSpace t) {
        this.schoolSpaceDao.save(t);
    }

    @Override
    public void delete(SchoolSpace t) {
        this.schoolSpaceDao.delete(t);
    }

    @Override
    public void delete(Long id) {
        this.schoolSpaceDao.deleteById(id);
    }

    @Override
    public void update(SchoolSpace t) {
        this.schoolSpaceDao.update(t);
    }

    @Override
    public SchoolSpace findById(Long id) {
        return this.schoolSpaceDao.findByID(id);
    }

    @Override
    public void save(List<SchoolSpace> schoolSpaces) {
        this.schoolSpaceDao.save(schoolSpaces);
    }

    @Override
    public boolean checkExistBySchoolName(String schoolName) {
        return this.schoolSpaceDao.checkExistBySchoolName(schoolName);
    }

}
