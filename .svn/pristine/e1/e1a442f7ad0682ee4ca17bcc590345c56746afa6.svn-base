package com.boventech.gplearn.interceptor;

import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.method.HandlerMethod;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

import com.boventech.gplearn.annotation.RequiredPrivilege;
import com.boventech.gplearn.entity.Privilege;
import com.boventech.gplearn.entity.User;
import com.boventech.gplearn.entity.User.UserType;
import com.boventech.gplearn.service.UserService;
import com.google.common.collect.Sets;

public class UserPrivilegeInterceptor extends HandlerInterceptorAdapter {

	@Autowired
	private UserService userService;
	
	@Override
	public boolean preHandle(HttpServletRequest request,
			HttpServletResponse response, Object handler) throws Exception {
		if(handler instanceof HandlerMethod){
		
			HandlerMethod handlerMethod = (HandlerMethod) handler;
			//获取当前请求所需的权限集合
			RequiredPrivilege requires=handlerMethod.getMethodAnnotation(RequiredPrivilege.class);
			//如果为null，那么当前请求并不需要任何权限过滤
			if(null==requires){
				return true;
			}
			else{
				HttpSession session = request.getSession();
				Object currentUser = session.getAttribute("currentUser");
				if(null == currentUser){
					response.sendRedirect(request.getContextPath());
					return false;
				}
				else{
					User user=userService.findByLoginName(currentUser.toString());
					
					//获取当前用户权限组
					Set<Privilege> userPrivileges=getPrivilegeOfUser(request, user.getUserType());
					boolean result=true;
					//检查用户是否含有当前方法的权限
					result=checkPrivileges(requires, userPrivileges);
					if(!result){
						response.sendRedirect(request.getContextPath()+"/error/404");
						return result;
					}
				}
			}
		}
		return super.preHandle(request, response, handler);
	}
	
	 private Set<Privilege> getPrivilegeOfUser(HttpServletRequest request, UserType userType) {
	    	Set<Privilege> privileges = Sets.newHashSet();
	    	privileges.addAll(Privilege.getPrivileges(userType));
	    	return privileges;
	    }
	
	private boolean checkPrivileges(RequiredPrivilege requires, Set<Privilege> userPrivileges) {
        for (Privilege privilege : requires.value()) {
            if (userPrivileges.contains(privilege))
                return true;
        }
        return false;
    }

	
}
